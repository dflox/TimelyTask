@startuml

class CalendarController implements Observer {
    + observe(publisher: Publisher, handler: (data: Object) -> Unit, source: Option[Object])
}

class ActiveViewPublisher implements Publisher {
    - observers: List[Observer]
    + getValue(): ViewType
}

class ModelPublisher implements Publisher {
    - observers: List[Observer]
}

class ViewModelPublisher implements Publisher {
    - observers: List[Observer]
    + update(model: CalendarModel)
}

class CalendarModel {
    - model: Object
}

enum ViewType {
    CALENDAR
    OTHER
}

CalendarController --> ActiveViewPublisher : observe
CalendarController --> ModelPublisher : observe
CalendarController --> ViewModelPublisher : updates

ActiveViewPublisher --> ViewType : getValue()

ViewModelPublisher --> CalendarModel : updates
ModelPublisher --> CalendarModel : provides model data

@enduml