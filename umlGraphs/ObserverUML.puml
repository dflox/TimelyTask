@startuml


class TaskController implements Observer {
    + observe(publisher: Publisher, handler: (data: Object) -> Unit, source: Option[Object])
}

class ActiveViewPublisher implements Publisher {
    - observers: List[Observer]
    + getValue(): ViewType
}

class ModelPublisher implements Publisher {
    - observers: List[Observer]
}

class ViewModelPublisher implements Publisher {
    - observers: List[Observer]
    + update(model: TaskModel)
}

class TaskModel {
    - model: Object
}

enum ViewType {
    TASK
    OTHER
}

TaskController --> ActiveViewPublisher : observe
TaskController --> ModelPublisher : observe
TaskController --> ViewModelPublisher : updates

ActiveViewPublisher --> ViewType : getValue()

ViewModelPublisher --> TaskModel : updates
ModelPublisher --> TaskModel : provides model data

@enduml